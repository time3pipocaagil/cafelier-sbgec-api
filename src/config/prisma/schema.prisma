// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

//==================== Modelos de Banco de Dados (Tabelas e Enums)=========================================

//Pais
model Country {
  id              String    @id @default(cuid())
  name            String    @db.VarChar(64)
  isoAlpha2       String    @db.VarChar(2)
  isoAlpha3       String    @db.VarChar(3)
  tld             String    @db.VarChar(64)
  productOriginal Product[] @relation("ProductToCountryOrigin")
}

//Departamento
model Department {
  id          String         @id @default(cuid())
  name        String         @unique
  description String?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  employees   Employee[]     @relation("EmployeeToDepartment")
  roles       EmployeeRole[]
}

//Funcionarios
model Employee {
  id          String                 @id @default(cuid())
  firstName   String
  lastName    String
  email       String                 @unique
  phone1      String                 @unique
  phone2      String?
  position    String
  departments Department[]           @relation("EmployeeToDepartment")
  hireDate    DateTime               @default(now())
  status      EmployeeUserStatusEnum @default(ACTIVE)
  user        EmployeeUser?          @relation("EmployeeUserToEmployee")
  createdAt   DateTime               @default(now())
  updatedAt   DateTime               @updatedAt

  // relacionamentos de criação e atualizações
  productCreated             Product[]             @relation("ProductToEmployeeCreator")
  productUpdated             Product[]             @relation("ProductToEmployeeUpdater")
  productVarietyCreated      ProductVariety[]      @relation("ProductVarietyToEmployeeCreator")
  productVarietyUpdated      ProductVariety[]      @relation("ProductVarietyToEmployeeUpdater")
  productVarietyImageCreated ProductVarietyImage[] @relation("ProductVarietyImageToEmployeeCreator")
  productVarietyImageUpdater ProductVarietyImage[] @relation("ProductVarietyImageToEmployeeUpdater")
}

//Roles dos funcionarios
model EmployeeRole {
  id           String         @id @default(cuid())
  name         String
  description  String?
  department   Department     @relation(fields: [departmentId], references: [id])
  departmentId String
  employees    EmployeeUser[] @relation("EmployeeUserToRoles")
}

//Conta do funcionario
model EmployeeUser {
  id         String                 @id @default(cuid())
  employee   Employee               @relation(name: "EmployeeUserToEmployee", fields: [employeeId], references: [id])
  employeeId String                 @unique
  userName   String                 @db.VarChar(16)
  password   String                 @db.VarChar(128)
  status     EmployeeUserStatusEnum @default(INACTIVE)
  roles      EmployeeRole[]         @relation("EmployeeUserToRoles")
  createdAt  DateTime               @default(now())
  updatedAt  DateTime               @updatedAt
}

//Status do funcionario
enum EmployeeUserStatusEnum {
  ACTIVE
  INACTIVE
  BLOCKED
}

//Clientes
model Customer {
  id        String        @id @default(cuid())
  firstName String        @db.VarChar(64)
  lastName  String        @db.VarChar(64)
  phone1    String
  phone2    String?
  address   String?
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  orders    Order[]       @relation("OrderToCustomer")
  cart      Cart?         @relation("CartToCustomer")
  user      CustomerUser? @relation("CustomerUserToCustomer")
}

model CustomerUser {
  id         String   @id @default(cuid())
  customer   Customer @relation("CustomerUserToCustomer", fields: [customerId], references: [id])
  customerId String   @unique
  email      String   @unique
  password   String   @db.VarChar(255)
}

//Categoria dos produtos
model ProductCategory {
  id          String    @id @default(cuid())
  name        String    @db.VarChar(255)
  description String    @db.VarChar(255)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  createdBy   String
  updatedBy   String
  Product     Product[] @relation("ProductToCategory")
}

//Marca dos produtos
model ProductBrand {
  id          String      @id @default(cuid())
  name        String      @db.VarChar(64)
  description String      @db.VarChar(255)
  founderYear DateTime
  logoUri     String      @db.VarChar(524)
  website     String      @db.VarChar(255)
  status      BrandStatus @default(ACTIVE)
  producer    Producer    @relation(name: "ProducerToProductBrand", fields: [producerId], references: [id])
  producerId  String
  Product     Product[]   @relation("ProductToProductBrand")
}

//Status de marca
enum BrandStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

//Produtos
model Product {
  id               String                 @id @default(cuid())
  name             String                 @db.VarChar(255)
  description      String                 @db.VarChar(255)
  productBrand     ProductBrand           @relation(name: "ProductToProductBrand", fields: [productBrandId], references: [id])
  brandId          String
  sku              String                 @db.VarChar(255)
  category         ProductCategory        @relation(name: "ProductToCategory", fields: [categoryId], references: [id])
  categoryId       String
  variety          ProductVariety[]       @relation("ProductVarietyToProduct")
  processingMethod CoffeeProcessingMethod
  batchNumber      String
  countryOrigin    Country                @relation(name: "ProductToCountryOrigin", fields: [countryOriginId], references: [id])
  countryOriginId  String
  createdAt        DateTime               @default(now())
  updatedAt        DateTime               @updatedAt
  productBrandId   String
  cartItems        CartItem[]             @relation("CartItemToProduct")
  creator          Employee               @relation(name: "ProductToEmployeeCreator", fields: [createdBy], references: [id])
  createdBy        String
  updater          Employee               @relation(name: "ProductToEmployeeUpdater", fields: [updatedBy], references: [id])
  updatedBy        String
}

//Variantes dos produtos
model ProductVariety {
  id                 String                @id @default(cuid())
  product            Product               @relation(name: "ProductVarietyToProduct", fields: [productId], references: [id])
  productId          String
  description        String                @db.VarChar(255)
  packageWeightGrams Decimal
  packageType        String
  images             ProductVarietyImage[] @relation("ProductImageToProductVariety")
  inventory          Inventory?            @relation("InventoryToProductVariety")
  createdAt          DateTime              @default(now())
  updatedAt          DateTime              @updatedAt
  creator            Employee              @relation(name: "ProductVarietyToEmployeeCreator", fields: [createdBy], references: [id])
  createdBy          String
  updater            Employee              @relation(name: "ProductVarietyToEmployeeUpdater", fields: [updatedBy], references: [id])
  updatedBy          String
}

//Imagens dos variantes dos produtos 
model ProductVarietyImage {
  id               String         @id @default(cuid())
  uri              String
  productVariety   ProductVariety @relation(name: "ProductImageToProductVariety", fields: [productVarietyId], references: [id])
  productVarietyId String
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  creator          Employee       @relation(name: "ProductVarietyImageToEmployeeCreator", fields: [createdBy], references: [id])
  createdBy        String
  updater          Employee       @relation(name: "ProductVarietyImageToEmployeeUpdater", fields: [updatedBy], references: [id])
  updatedBy        String
}

//metodo de processamento de café
enum CoffeeProcessingMethod {
  WASHED // Método úmido
  NATURAL // Método natural ou seco
  HONEY // Método honey ou mel
  PULPED_NATURAL // Método despolpado natural
  WET_HULLED // Método úmido parcial (comum na Indonésia)
  ANAEROBIC // Fermentação anaeróbica
  CARBONIC_MACERATION // Maceração carbônica
  EXPERIMENTAL // Processos experimentais ou híbridos
}

// model ProductOrigin {
//   id String @id @default(cuid())
// }

//Produtor
model Producer {
  id            String         @id @default(cuid())
  name          String         @db.VarChar(255)
  socialReason  String
  createdAt     String
  updatedAt     String
  productBrands ProductBrand[] @relation("ProducerToProductBrand")
}

//Fornecedor
model Supplier {
  id        String      @id @default(cuid())
  name      String      @db.VarChar(255)
  email     String
  phone1    String
  phone2    String
  inventory Inventory[] @relation("InventoryToSupplier")
}

//Inventario de stock
model Inventory {
  id             String              @id @default(cuid())
  productVariety ProductVariety      @relation(name: "InventoryToProductVariety", fields: [productId], references: [id])
  productId      String              @unique
  supplier       Supplier            @relation(name: "InventoryToSupplier", fields: [supplierId], references: [id])
  supplierId     String
  sku            String              @db.VarChar(24)
  quantity       Int                 @default(0)
  price          Decimal
  expirationDate DateTime
  lastRestocked  DateTime
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  status         InventoryStatusEnum @default(REGISTERED)
  weightGrams    Decimal
  createdBy      String
  updatedBy      String
}

//status de inventario de stock
enum InventoryStatusEnum {
  ACTIVE //ativo
  INACTIVE //inativo
  LOW_STOCK //baixo stock
  OUT_OF_STOCK //esgotado
  COMING_SOON //Em breve
  PAUSED //pausado
  REGISTERED //registrado
}

//Carrinho de compra
model Cart {
  id         String     @id @default(cuid())
  customer   Customer   @relation(name: "CartToCustomer", fields: [customerId], references: [id])
  customerId String     @unique
  items      CartItem[] @relation("CartItemToCart")
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

//Items do carrinho de compra
model CartItem {
  id        String  @id @default(cuid()) @map("_id")
  cart      Cart    @relation(name: "CartItemToCart", fields: [cartId], references: [id])
  cartId    String
  product   Product @relation(name: "CartItemToProduct", fields: [productId], references: [id])
  productId String
  quantity  Int     @default(1)
  price     Decimal // preço unitário na época da adição
}

//Pedidos
model Order {
  id          String      @id @default(cuid())
  customer    Customer    @relation(name: "OrderToCustomer", fields: [customerId], references: [id])
  customerId  String
  status      OrderStatus @default(PENDING)
  totalAmount Decimal
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  items       OrderItem[] @relation("OrderToOrderItem")
  checkout    Checkout?   @relation("CheckoutToOrder")
}

//Items do pedido
model OrderItem {
  id         String  @id @default(cuid())
  order      Order   @relation("OrderToOrderItem", fields: [orderId], references: [id])
  orderId    String
  productId  String
  quantity   Int
  unitPrice  Decimal
  totalPrice Decimal
}

//Checkout de pagamento do pedido
model Checkout {
  id      String        @id @default(cuid())
  order   Order         @relation(name: "CheckoutToOrder", fields: [orderId], references: [id])
  orderId String        @unique
  status  PaymentStatus
  paidAt  DateTime?
  method  PaymentMethod
}

//status do pedido
enum OrderStatus {
  PENDING //pendente
  CONFIRMED //confirmado
  SHIPPED //enviado
  DELIVERED //entregue
  CANCELLED //cancelado
}

//Status de pagamento do pedido
enum PaymentStatus {
  PENDING //Pendente
  COMPLETED //Completado
  FAILED //pagamento falhado
}

//Metodos de pagamento
enum PaymentMethod {
  CREDIT_CARD //cartão de crédito
  DEBIT_CARD //cartão de débito
  PAYPAL //paypal
  PIX //pix 
  BOLETO //boleto
}

model Email {
  id        String      @id @default(cuid())
  to        String // Destinatário
  from      String // Remetente
  subject   String // Assunto
  body      String // Corpo do email (pode ser texto ou HTML)
  type      EmailType // Tipo de email, usando enum
  status    EmailStatus @default(PENDING) // Status do envio
  sentAt    DateTime? // Data de envio
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

enum EmailType {
  WELCOME // Email de boas-vindas
  PASSWORD_RESET // Redefinição de senha
  VERIFICATION // Verificação de conta
  PROMOTION // Promoções e marketing
  NEWSLETTER // Newsletter ou boletins informativos
  TRANSACTIONAL // Confirmações e notificações transacionais
  ALERT // Alertas de segurança ou sistema
  FEEDBACK_REQUEST // Pedido de feedback ou avaliação
}

enum EmailStatus {
  PENDING // Pendente de envio
  SENT // Enviado com sucesso
  FAILED // Falha no envio
}
